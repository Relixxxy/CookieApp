// <auto-generated />
using CookieData.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookieData.Migrations
{
    [DbContext(typeof(CookieContext))]
    [Migration("20230124175758_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CookieData.Entities.ClickUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClickUpgradeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameAccountId")
                        .HasColumnType("int");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<int>("UpgradeInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameAccountId")
                        .IsUnique();

                    b.HasIndex("UpgradeInfoId");

                    b.ToTable("ClickUpgrade", (string)null);
                });

            modelBuilder.Entity("CookieData.Entities.FairyTail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FairyTailId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Trigger")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("FairyTail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "images/Profile/1.png",
                            Story = "My life was not the best, and I decided that it was my time to change it all...",
                            Trigger = 0.0
                        },
                        new
                        {
                            Id = 2,
                            Image = "images/Profile/2.png",
                            Story = "And that's how I became a simple cook...",
                            Trigger = 100.0
                        },
                        new
                        {
                            Id = 3,
                            Image = "images/Profile/3.png",
                            Story = "It was very hard for me, and I was sick of this life, until one moment...",
                            Trigger = 2000.0
                        },
                        new
                        {
                            Id = 4,
                            Image = "images/Profile/4.png",
                            Story = "I met her, my ray of sunshine in this gloomy life.",
                            Trigger = 20000.0
                        },
                        new
                        {
                            Id = 5,
                            Image = "images/Profile/5.png",
                            Story = "I continued to work in the bakery, but I realized that I had someone else to live for.",
                            Trigger = 200000.0
                        },
                        new
                        {
                            Id = 6,
                            Image = "images/Profile/6.png",
                            Story = "And unexpectedly, it turned out that her grandmother is the owner of this place.",
                            Trigger = 2500000.0
                        },
                        new
                        {
                            Id = 7,
                            Image = "images/Profile/7.png",
                            Story = "Business was going well and grandmother decided to leave the bakery to us, but why? We didn't understand...",
                            Trigger = 45000000.0
                        },
                        new
                        {
                            Id = 8,
                            Image = "images/Profile/8.png",
                            Story = "We didn't lose our cool and made this place very successful and attractive to everyone who passes by.",
                            Trigger = 1000000000.0
                        },
                        new
                        {
                            Id = 9,
                            Image = "images/Profile/9.png",
                            Story = "Once grandmother came to visit us, and it turned out that she had opened a restaurant, and I became her head chef.",
                            Trigger = 12000000000.0
                        },
                        new
                        {
                            Id = 10,
                            Image = "images/Profile/10.png",
                            Story = "Then I realized that I had to move on. And I opened a franchise",
                            Trigger = 201000000000.0
                        },
                        new
                        {
                            Id = 11,
                            Image = "images/Profile/11.png",
                            Story = "There is no limit to progress, I need to build a factory",
                            Trigger = 3000000000000.0
                        },
                        new
                        {
                            Id = 12,
                            Image = "images/Profile/12.png",
                            Story = "Since I have factories, I realized that I could do business all over the world.",
                            Trigger = 40000000000000.0
                        },
                        new
                        {
                            Id = 13,
                            Image = "images/Profile/13.png",
                            Story = "Having done business all over the planet, you can go further, and I decided that it would be space.",
                            Trigger = 400000000000000.0
                        },
                        new
                        {
                            Id = 14,
                            Image = "images/Profile/14.png",
                            Story = "There's more. And I decided to build my empire in the past so that people would learn what cookies are from me.",
                            Trigger = 5100000000000000.0
                        },
                        new
                        {
                            Id = 15,
                            Image = "images/Profile/15.png",
                            Story = "Well, we don't believe that you got here on your own, so we just congratulate you. And if you did it all on your own, go ahead and write here: vut1111111@gmail.com or allonsy053@gmail.com, and share your experience and how you like our game. Have you checked out our RXY and ALG currencies?",
                            Trigger = 77000000000000000.0
                        });
                });

            modelBuilder.Entity("CookieData.Entities.GameAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GameAccountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Clicks")
                        .HasColumnType("bigint");

                    b.Property<double>("Cookies")
                        .HasColumnType("float");

                    b.Property<double>("Networth")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GameAccount", (string)null);
                });

            modelBuilder.Entity("CookieData.Entities.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UpgradeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("GameAccountId")
                        .HasColumnType("int");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<int>("UpgradeInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameAccountId");

                    b.HasIndex("UpgradeInfoId");

                    b.ToTable("Upgrade", (string)null);
                });

            modelBuilder.Entity("CookieData.Entities.UpgradeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UpgradeInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BasePrice")
                        .HasColumnType("bigint");

                    b.Property<double>("BaseValue")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LvlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UpgradeInfo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 100L,
                            BaseValue = 1.0,
                            Image = "images/Upgrades/Clicker.png",
                            LvlImage = "images/LvlUps/Clicker.png",
                            Name = "Click"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 15L,
                            BaseValue = 0.10000000000000001,
                            Image = "images/Upgrades/HandMate.png",
                            LvlImage = "images/LvlUps/HandMate.png",
                            Name = "Hand Mate"
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 100L,
                            BaseValue = 1.0,
                            Image = "images/Upgrades/RollingPin.png",
                            LvlImage = "images/LvlUps/RollingPin.png",
                            Name = "Rolling Pin"
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 1100L,
                            BaseValue = 8.0,
                            Image = "images/Upgrades/Oven.png",
                            LvlImage = "images/LvlUps/Oven.png",
                            Name = "Oven"
                        },
                        new
                        {
                            Id = 5,
                            BasePrice = 12000L,
                            BaseValue = 47.0,
                            Image = "images/Upgrades/GrandDaughter.png",
                            LvlImage = "images/LvlUps/GrandDaughter.png",
                            Name = "Grand Daughter"
                        },
                        new
                        {
                            Id = 6,
                            BasePrice = 130000L,
                            BaseValue = 260.0,
                            Image = "images/Upgrades/Baker.png",
                            LvlImage = "images/LvlUps/Baker.png",
                            Name = "Baker"
                        },
                        new
                        {
                            Id = 7,
                            BasePrice = 1400000L,
                            BaseValue = 1400.0,
                            Image = "images/Upgrades/GrannyBoss.png",
                            LvlImage = "images/LvlUps/GrannyBoss.png",
                            Name = "Granny Boss"
                        },
                        new
                        {
                            Id = 8,
                            BasePrice = 20000000L,
                            BaseValue = 7800.0,
                            Image = "images/Upgrades/BunsStall.png",
                            LvlImage = "images/LvlUps/BunsStall.png",
                            Name = "Buns Stall"
                        },
                        new
                        {
                            Id = 9,
                            BasePrice = 330000000L,
                            BaseValue = 44000.0,
                            Image = "images/Upgrades/Bakery.png",
                            LvlImage = "images/LvlUps/Bakery.png",
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = 10,
                            BasePrice = 5100000000L,
                            BaseValue = 260000.0,
                            Image = "images/Upgrades/GrannysRestaurant.png",
                            LvlImage = "images/LvlUps/GrannysRestaurant.png",
                            Name = "Granny's Restaurant"
                        },
                        new
                        {
                            Id = 11,
                            BasePrice = 75000000000L,
                            BaseValue = 1600000.0,
                            Image = "images/Upgrades/CookieFranchise.png",
                            LvlImage = "images/LvlUps/CookieFranchise.png",
                            Name = "Cookie Franchise"
                        },
                        new
                        {
                            Id = 12,
                            BasePrice = 1000000000000L,
                            BaseValue = 10000000.0,
                            Image = "images/Upgrades/Factory.png",
                            LvlImage = "images/LvlUps/Factory.png",
                            Name = "Factory"
                        },
                        new
                        {
                            Id = 13,
                            BasePrice = 14000000000000L,
                            BaseValue = 65000000.0,
                            Image = "images/Upgrades/WorldwideShipping.png",
                            LvlImage = "images/LvlUps/WorldwideShipping.png",
                            Name = "Worldwide Shipping"
                        },
                        new
                        {
                            Id = 14,
                            BasePrice = 170000000000000L,
                            BaseValue = 430000000.0,
                            Image = "images/Upgrades/SpaceDevilery.png",
                            LvlImage = "images/LvlUps/SpaceDevilery.png",
                            Name = "Space Devilery"
                        },
                        new
                        {
                            Id = 15,
                            BasePrice = 2100000000000000L,
                            BaseValue = 2900000000.0,
                            Image = "images/Upgrades/TimeMachine.png",
                            LvlImage = "images/LvlUps/TimeMachine.png",
                            Name = "Time Machine"
                        },
                        new
                        {
                            Id = 16,
                            BasePrice = 26000000000000000L,
                            BaseValue = 21000000000.0,
                            Image = "images/Upgrades/GamerCheater.png",
                            LvlImage = "images/LvlUps/GamerCheater.png",
                            Name = "!Gamer || Cheater!"
                        });
                });

            modelBuilder.Entity("CookieData.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GameAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("GameAccountId")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CookieData.Entities.ClickUpgrade", b =>
                {
                    b.HasOne("CookieData.Entities.GameAccount", "GameAccount")
                        .WithOne("ClickUpgrade")
                        .HasForeignKey("CookieData.Entities.ClickUpgrade", "GameAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookieData.Entities.UpgradeInfo", "UpgradeInfo")
                        .WithMany("ClickUpgrades")
                        .HasForeignKey("UpgradeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAccount");

                    b.Navigation("UpgradeInfo");
                });

            modelBuilder.Entity("CookieData.Entities.Upgrade", b =>
                {
                    b.HasOne("CookieData.Entities.GameAccount", "GameAccount")
                        .WithMany("Upgrades")
                        .HasForeignKey("GameAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookieData.Entities.UpgradeInfo", "UpgradeInfo")
                        .WithMany("Upgrades")
                        .HasForeignKey("UpgradeInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAccount");

                    b.Navigation("UpgradeInfo");
                });

            modelBuilder.Entity("CookieData.Entities.User", b =>
                {
                    b.HasOne("CookieData.Entities.GameAccount", "GameAccount")
                        .WithOne("User")
                        .HasForeignKey("CookieData.Entities.User", "GameAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameAccount");
                });

            modelBuilder.Entity("CookieData.Entities.GameAccount", b =>
                {
                    b.Navigation("ClickUpgrade")
                        .IsRequired();

                    b.Navigation("Upgrades");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("CookieData.Entities.UpgradeInfo", b =>
                {
                    b.Navigation("ClickUpgrades");

                    b.Navigation("Upgrades");
                });
#pragma warning restore 612, 618
        }
    }
}
